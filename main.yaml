---
- name: Operating System Bootstrap
  hosts: localhost
  connection: local

  vars_files:
    - vars.yaml

  pre_tasks:
    - name: Update apt cache if it's needed.
      apt:
        update_cache: true
        upgrade: "full"
        cache_valid_time: 3600
      become: true

    - name: Install prerequisite apt packages.
      apt:
        name:
          - git
          - curl
          - apt-transport-https
          - gnupg
          - pass
          - ca-certificates
          - lsb-release
          - python3-pip
          - software-properties-common
          - bison
          - libedit-dev
      become: true

  tasks:
    - name: Import the 3rd party apt packages GPG keys.
      apt_key:
        url: "{{ item }}"
        state: present
      with_items:
        - https://baltocdn.com/helm/signing.asc
        - https://apt.releases.hashicorp.com/gpg
        - https://download.docker.com/linux/ubuntu/gpg
        - https://ngrok-agent.s3.amazonaws.com/ngrok.asc
        - https://www.virtualbox.org/download/oracle_vbox_2016.asc
        - https://www.virtualbox.org/download/oracle_vbox.asc
        - https://packages.microsoft.com/keys/microsoft.asc
      become: true

    - name: Import the 3rd party apt packages GPG keys. (trusted-gpg)
      apt_key:
        url: "{{ item.url }}"
        keyring: "{{ item.keyring }}"
        state: present
      with_items:
        - url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
          keyring: /etc/apt/trusted.gpg.d/cloud.google.gpg
        - url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
          keyring: /etc/apt/trusted.gpg.d/kubernetes-archive-keyring.gpg
        - url: https://download.docker.com/linux/debian/gpg
          keyring: /etc/apt/keyrings/docker.gpg
      become: true

    - name: Add the 3rd party apt packages repositories.
      apt_repository:
        repo: "{{ item.repo }}"
        state: present
        filename: "{{ item.file_name }}"
        update_cache: true
      with_items:
        - repo: "deb [signed-by=/etc/apt/trusted.gpg.d/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main"
          file_name: google-cloud-sdk
        - repo: "deb [signed-by=/etc/apt/trusted.gpg.d/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main"
          file_name: kubernetes
        - repo: "deb https://baltocdn.com/helm/stable/debian/ all main"
          file_name: helm-stable-debian
        - repo: "deb [arch=amd64] https://apt.releases.hashicorp.com xenial main"
          file_name: hashicorp
        - repo: "deb https://ngrok-agent.s3.amazonaws.com buster main"
          file_name: ngrok
        - repo: "deb [arch=amd64] https://download.virtualbox.org/virtualbox/debian buster contrib"
          file_name: virtualbox
        - repo: "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"
          file_name: vscode
        - repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian stretch stable"
          file_name: docker
      become: true

    - name: Install apt packages.
      apt:
        name:
          # General
          - htop
          - curl
          - unrar
          - ipcalc
          - fish
          # GUI
          - parcellite
          # 3rd party
          - google-cloud-sdk
          - google-cloud-sdk-gke-gcloud-auth-plugin
          - kubectl
          - helm
          - terraform
          - vagrant
          - ngrok
          - virtualbox
          - code
        state: present
        autoclean: true
      become: true

    - name: Check if Docker CLI exists.
      stat:
        path: /usr/local/bin/docker
      register: docker_stat

    - name: Install desktop-docker deb package.
      apt:
        deb: "https://desktop.docker.com/linux/main/amd64/docker-desktop-4.11.0-amd64.deb"
        state: present
        autoclean: true
      when: docker_stat.stat.exists == False
      become: true

    - name: Check if AWS CLI exists.
      stat:
        path: /usr/local/bin/aws
      register: aws_stat

    - name: Download AWS CLI.
      get_url:
        url: "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
        dest: /tmp/awscliv2.zip
      when: aws_stat.stat.exists == False

    - name: Unzip AWS CLI.
      unarchive:
        src: /tmp/awscliv2.zip
        dest: /tmp/
      when: aws_stat.stat.exists == False

    - name: Install AWS CLI
      shell: /tmp/aws/install
      when: aws_stat.stat.exists == False
      become: true

    - include_tasks: ./tasks/install-fish-addons.yaml
      with_items:
        - path: completions/fisher.fish # Fisher must be the first item.
          cmd: "curl -sL https://git.io/fisher | source - && fisher install jorgebucaran/fisher"
        - path: completions/gcloud.fish
          cmd: "fisher install aliz-ai/google-cloud-sdk-fish-completion"
        - path: completions/kubectl.fish
          cmd: "fisher install evanlucas/fish-kubectl-completions"

    - name: Check pyenv exists.
      stat:
        path: ~/.pyenv/bin/pyenv
      register: pyenv_stat

    - name: Install pyenv.
      shell: curl https://pyenv.run | bash
      when: pyenv_stat.stat.exists == False

    - name: Copy config.fish.
      copy:
        src: ./config.fish
        dest: ~/.config/fish/config.fish
